pub const RANGE_MIN: [f32; 2] = [20.0, 20.0];
pub const RANGE_MAX: [f32; 2] = [50.0, 50.0];

pub const WITHIN_CENTER: [f32; 2] = [50.0, 50.0];
pub const WITHIN_RADIUS: f32 = 20.0;

//pub static RANGE: &[u32] = &[60,20,45,3,17,71,44,19,18,15,69,90,62,96,47,8,77,72];
//pub static WITHIN: &[u32] = &[60,6,25,92,42,20,45,3,71,44,18,96];

pub static POINTS: &[[f32; 2]] = &[
    [54.0, 1.0],[97.0,21.0],[65.0,35.0],[33.0,54.0],[95.0,39.0],
    [54.0, 3.0],[53.0,54.0],[84.0,72.0],[33.0,34.0],[43.0,15.0],
    [52.0,83.0],[81.0,23.0],[ 1.0,61.0],[38.0,74.0],[11.0,91.0],
    [24.0,56.0],[90.0,31.0],[25.0,57.0],[46.0,61.0],[29.0,69.0],
    [49.0,60.0],[ 4.0,98.0],[71.0,15.0],[60.0,25.0],[38.0,84.0],
    [52.0,38.0],[94.0,51.0],[13.0,25.0],[77.0,73.0],[88.0,87.0],
    [ 6.0,27.0],[58.0,22.0],[53.0,28.0],[27.0,91.0],[96.0,98.0],
    [93.0,14.0],[22.0,93.0],[45.0,94.0],[18.0,28.0],[35.0,15.0],
    [19.0,81.0],[20.0,81.0],[67.0,53.0],[43.0, 3.0],[47.0,66.0],
    [48.0,34.0],[46.0,12.0],[32.0,38.0],[43.0,12.0],[39.0,94.0],
    [88.0,62.0],[66.0,14.0],[84.0,30.0],[72.0,81.0],[41.0,92.0],
    [26.0, 4.0],[ 6.0,76.0],[47.0,21.0],[57.0,70.0],[71.0,82.0],
    [50.0,68.0],[96.0,18.0],[40.0,31.0],[78.0,53.0],[71.0,90.0],
    [32.0,14.0],[55.0, 6.0],[32.0,88.0],[62.0,32.0],[21.0,67.0],
    [73.0,81.0],[44.0,64.0],[29.0,50.0],[70.0, 5.0],[ 6.0,22.0],
    [68.0, 3.0],[11.0,23.0],[20.0,42.0],[21.0,73.0],[63.0,86.0],
    [ 9.0,40.0],[99.0, 2.0],[99.0,76.0],[56.0,77.0],[83.0, 6.0],
    [21.0,72.0],[78.0,30.0],[75.0,53.0],[41.0,11.0],[95.0,20.0],
    [30.0,38.0],[96.0,82.0],[65.0,48.0],[33.0,18.0],[87.0,28.0],
    [10.0,10.0],[40.0,34.0],[10.0,20.0],[47.0,29.0],[46.0,78.0],
];

pub fn test_range(p: [f32; 2]) -> bool {
    p[0] >= RANGE_MIN[0] && p[0] <= RANGE_MAX[0] &&
    p[1] >= RANGE_MIN[1] && p[1] <= RANGE_MAX[1]
}

pub fn test_within(p: [f32; 2]) -> bool {
    let dx = p[0] - WITHIN_CENTER[0];
    let dy = p[1] - WITHIN_CENTER[1];
    dx * dx + dy * dy <= WITHIN_RADIUS * WITHIN_RADIUS
}

pub fn brute_range() -> impl Iterator<Item=u32> {
    POINTS.iter()
        .enumerate()
        .filter_map(|(i, &p)| {
            if test_range(p) {
                Some(i as u32)
            } else {
                None
            }
        })
}

pub fn brute_within() -> impl Iterator<Item=u32> {
    POINTS.iter()
        .enumerate()
        .filter_map(|(i, &p)| {
            if test_within(p) {
                Some(i as u32)
            } else {
                None
            }
        })
}
