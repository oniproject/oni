#![allow(dead_code)]

// Interleave bits of x and y, so that all of the
// bits of x are in the even positions and y in the odd;
// z gets the resulting Morton Number.
fn naive(x: u16, y: u16) -> u32 {
    let (x, y) = (x as u32, y as u32);
    let mut z = 0;
    for i in 0..16 { // unroll for more speed...
        z |= (x & 1 << i) << i | (y & 1 << i) << (i + 1);
    }
    z
}

macro table($a:ident, $b:ident, $c:ident, $d:ident, $e:ident, [ $($num:expr,)+ ]) {
    static $a: [u32; 256] = [ $($num << 17,)+ ];
    static $b: [u32; 256] = [ $($num << 16,)+ ];
    static $c: [u32; 256] = [ $($num << 1,)+ ];
    static $d: [u32; 256] = [ $($num,)+ ];

    static $e: [u16; 256] = [ $($num,)+ ];
}

table!(TABLE_17, TABLE_16, TABLE_1, TABLE, TABLE_U16, [
    0x0000, 0x0001, 0x0004, 0x0005, 0x0010, 0x0011, 0x0014, 0x0015,
    0x0040, 0x0041, 0x0044, 0x0045, 0x0050, 0x0051, 0x0054, 0x0055,
    0x0100, 0x0101, 0x0104, 0x0105, 0x0110, 0x0111, 0x0114, 0x0115,
    0x0140, 0x0141, 0x0144, 0x0145, 0x0150, 0x0151, 0x0154, 0x0155,
    0x0400, 0x0401, 0x0404, 0x0405, 0x0410, 0x0411, 0x0414, 0x0415,
    0x0440, 0x0441, 0x0444, 0x0445, 0x0450, 0x0451, 0x0454, 0x0455,
    0x0500, 0x0501, 0x0504, 0x0505, 0x0510, 0x0511, 0x0514, 0x0515,
    0x0540, 0x0541, 0x0544, 0x0545, 0x0550, 0x0551, 0x0554, 0x0555,
    0x1000, 0x1001, 0x1004, 0x1005, 0x1010, 0x1011, 0x1014, 0x1015,
    0x1040, 0x1041, 0x1044, 0x1045, 0x1050, 0x1051, 0x1054, 0x1055,
    0x1100, 0x1101, 0x1104, 0x1105, 0x1110, 0x1111, 0x1114, 0x1115,
    0x1140, 0x1141, 0x1144, 0x1145, 0x1150, 0x1151, 0x1154, 0x1155,
    0x1400, 0x1401, 0x1404, 0x1405, 0x1410, 0x1411, 0x1414, 0x1415,
    0x1440, 0x1441, 0x1444, 0x1445, 0x1450, 0x1451, 0x1454, 0x1455,
    0x1500, 0x1501, 0x1504, 0x1505, 0x1510, 0x1511, 0x1514, 0x1515,
    0x1540, 0x1541, 0x1544, 0x1545, 0x1550, 0x1551, 0x1554, 0x1555,
    0x4000, 0x4001, 0x4004, 0x4005, 0x4010, 0x4011, 0x4014, 0x4015,
    0x4040, 0x4041, 0x4044, 0x4045, 0x4050, 0x4051, 0x4054, 0x4055,
    0x4100, 0x4101, 0x4104, 0x4105, 0x4110, 0x4111, 0x4114, 0x4115,
    0x4140, 0x4141, 0x4144, 0x4145, 0x4150, 0x4151, 0x4154, 0x4155,
    0x4400, 0x4401, 0x4404, 0x4405, 0x4410, 0x4411, 0x4414, 0x4415,
    0x4440, 0x4441, 0x4444, 0x4445, 0x4450, 0x4451, 0x4454, 0x4455,
    0x4500, 0x4501, 0x4504, 0x4505, 0x4510, 0x4511, 0x4514, 0x4515,
    0x4540, 0x4541, 0x4544, 0x4545, 0x4550, 0x4551, 0x4554, 0x4555,
    0x5000, 0x5001, 0x5004, 0x5005, 0x5010, 0x5011, 0x5014, 0x5015,
    0x5040, 0x5041, 0x5044, 0x5045, 0x5050, 0x5051, 0x5054, 0x5055,
    0x5100, 0x5101, 0x5104, 0x5105, 0x5110, 0x5111, 0x5114, 0x5115,
    0x5140, 0x5141, 0x5144, 0x5145, 0x5150, 0x5151, 0x5154, 0x5155,
    0x5400, 0x5401, 0x5404, 0x5405, 0x5410, 0x5411, 0x5414, 0x5415,
    0x5440, 0x5441, 0x5444, 0x5445, 0x5450, 0x5451, 0x5454, 0x5455,
    0x5500, 0x5501, 0x5504, 0x5505, 0x5510, 0x5511, 0x5514, 0x5515,
    0x5540, 0x5541, 0x5544, 0x5545, 0x5550, 0x5551, 0x5554, 0x5555,
]);

// Interleave bits of x and y, so that all of the
// bits of x are in the even positions and y in the odd;
// z gets the resulting 32-bit Morton Number.
fn table1(x: u16, y: u16) -> u32 {
    let a = TABLE_U16[(y >> 8  ) as usize] as u32;
    let b = TABLE_U16[(x >> 8  ) as usize] as u32;
    let c = TABLE_U16[(y & 0xFF) as usize] as u32;
    let d = TABLE_U16[(x & 0xFF) as usize] as u32;
    (a << 17) | (b << 16) | (c << 1) | d
}

// Interleave bits of x and y, so that all of the
// bits of x are in the even positions and y in the odd;
// z gets the resulting 32-bit Morton Number.
fn table4(x: u16, y: u16) -> u32 {
    TABLE_17[(y >> 8  ) as usize] | TABLE_16[(x >> 8  ) as usize] |
    TABLE_1 [(y & 0xFF) as usize] | TABLE   [(x & 0xFF) as usize]
}

// Interleave bits of (8-bit) x and y, so that all of the
// bits of x are in the even positions and y in the odd;
// z gets the resulting 16-bit Morton Number.
fn mul(x: u8, y: u8) -> u16 {
    let (x, y) = (x as u64, y as u64);
    let x = ((x * 0x0101010101010101 & 0x8040201008040201) * 0x0102040810204081 >> 49) & 0x5555;
    let y = ((y * 0x0101010101010101 & 0x8040201008040201) * 0x0102040810204081 >> 48) & 0xAAAA;
    (x | y) as u16
}

// Interleave lower 16 bits of x and y, so the bits of x
// are in the even positions and bits from y in the odd;
// z gets the resulting 32-bit Morton Number.
fn magic(x: u16, y: u16) -> u32 {
    let (x, y) = (x as u32, y as u32);

    const B0: u32 = 0x55555555;
    const B1: u32 = 0x33333333;
    const B2: u32 = 0x0F0F0F0F;
    const B3: u32 = 0x00FF00FF;

    const S0: u32 = 1;
    const S1: u32 = 2;
    const S2: u32 = 4;
    const S3: u32 = 8;

    let x = (x | (x << S3)) & B3;
    let x = (x | (x << S2)) & B2;
    let x = (x | (x << S1)) & B1;
    let x = (x | (x << S0)) & B0;

    let y = (y | (y << S3)) & B3;
    let y = (y | (y << S2)) & B2;
    let y = (y | (y << S1)) & B1;
    let y = (y | (y << S0)) & B0;

    x | (y << 1)
}
